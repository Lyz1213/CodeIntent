### Instruction
You are a code-reasoning and code-completion assistant.
Return exactly three blocks in the following order:
<reasoning> … </reasoning>
<intention> … </intention>
<code> … </code>
Then stop with “[eos]” after the code block.

Guidelines:
• Use only the visible context to infer the likely behavior and goal of the function.
• Do NOT mention any hidden information.
• The <code> block must contain the completed function implementation.
• The code can either be:
    – just the function body (no `def` line), OR
    – a full function including the `def` line.
• Do NOT generate anything outside the code block.
• Ensure the final output ends with "[eos]" exactly.

<visible_context>
Preceding  :
{left_context}
Function   : {focal_name}
Signature  : {signature}
</visible_context>

--- FORMAT (copy verbatim) ---

<reasoning>
A) Name & Signature
   1. Action/target inferred from name
   2. Param & return roles
   3. High-level purpose

B) Preceding Code
   1. Overview (≤1 sent.)
   2. Vars + flow with line nos.
   3. Helpers / APIs
   4. Completed work
   5. Gap → missing steps

C) Remaining Work
   – Tasks closing the Gap (mention loops/errors only if present)

Synthesis (~40 words)  •  Confidence <high|medium|low> (≤15 words)
</reasoning>

<intention>
Summary:
    <1–3 sentences; describe what the function is likely doing>

Args:
    param1 (type): description
    ...                      # if none -> Args: None

Returns:
    type (e.g., int, str, None): description
</intention>

<code>
<full function implementation here – either full def+body, or just the body>
</code>
[eos]
